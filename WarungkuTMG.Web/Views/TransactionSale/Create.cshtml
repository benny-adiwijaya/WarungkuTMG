@using WarungkuTMG.Domain.Enums
@model TransactionCreateVM
@{
    ViewData["Title"] = "Transaction";
}
<div class="w-100 card border-0 p-4">
    <div class="card-header bg-danger bg-gradient ml-0 py-3">
        <div class="row">
            <div class="col-12 text-center">
                <h2 class="text-white py-2">Transaction Create</h2>
            </div>
        </div>
    </div>
    <form id="transactionForm" method="post" asp-action="Create" asp-controller="TransactionSale">
        <input type="hidden" asp-for="TransactionSale.UserLogin" />
        <input type="hidden" asp-for="Payment.PaymentType" id="PaymentType" />
        <input type="hidden" asp-for="Payment.Amount" id="PaymentAmount" />
        <input type="hidden" asp-for="Payment.EvidenceNumber" id="PaymentEvidenceNumber" />


        <div class="card-body border p-4">
            <div class="container">
                <!-- User Input -->
                <div class="row g-3">
                    <div class="col-md-6">
                        <label class="form-label">User Login</label>
                        <input type="text" class="form-control" asp-for="TransactionSale.UserLogin" disabled/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Customer Name</label>
                        <input type="text" class="form-control" asp-for="TransactionSale.CustomerName"/>
                        <span asp-validation-for="TransactionSale.CustomerName" class="text-danger"></span>
                    </div>

                    <div class="col-md-6">
                        <label class="form-label">Discount (%)</label>
                        <input type="number" class="form-control" id="discountInput" asp-for="TransactionSale.DiscountAmount"/>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Voucher (Rp)</label>
                        <input type="number" class="form-control" id="voucherInput" asp-for="TransactionSale.VoucherAmount"/>
                    </div>

                </div>

                <!-- Summary -->
                <div class="row text-center summary-box mt-4">
                    <div class="col-md-3">
                        <h4>Total</h4>
                        <p id="totalDisplay">@Model.TransactionSale.Total</p>
                    </div>
                    <div class="col-md-3">
                        <h4>Discount</h4>
                        <p class="discount" id="discountDisplay">@Model.TransactionSale.DiscountAmount</p>
                    </div>
                    <div class="col-md-3">
                        <h4>Voucher</h4>
                        <p class="voucher" id="voucherDisplay">-@Model.TransactionSale.VoucherAmount</p>
                    </div>
                    <div class="col-md-3">
                        <h4>Grand Total</h4>
                        <p class="grand-total" id="grandTotalDisplay">@Model.TransactionSale.GrandTotal</p>
                    </div>
                </div>

                <div class="row g-3 justify-content-end mt-2 mb-2">
                    <div class="col-md-6 d-flex align-items-center">
                        <label class="form-label me-3 mb-0">Payment</label>

                        <div class="d-flex flex-grow-1 gap-2">
                            <!-- Cash Button -->
                            <button type="button" class="btn btn-primary w-100"
                                    onclick="setPaymentType('Cash'); $('#cashModal').modal('show');">
                                Cash
                            </button>

                            <!-- Non Cash Button -->
                            <button type="button" class="btn btn-primary w-100"
                                    onclick="setPaymentType('NonCash'); $('#nonCashModal').modal('show');">
                                Non Cash
                            </button>
                        </div>
                    </div>
                </div>
                
                <div class="d-flex justify-content-between align-items-center mt-3 mb-3">
                    <button type="button" class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#addDetailModal">
                        Add Item
                    </button>
                </div>

                <partial name="_TransactionDetailList" model="Model.TransactionSale" view-data='new ViewDataDictionary(ViewData) { { "ShowActions", true } }'/>
            </div>
        </div>
    </form>
</div>

<div class="modal fade" id="addDetailModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Add Product</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="mb-3">
                    <label class="form-label">Product</label>
                    <select id="productSelect" class="form-select">
                        <option value="">Select a product...</option>
                        @foreach (var product in Model.Products)
                        {
                            <option value="@product.Id" 
                                    data-price="@product.Price" 
                                    data-name="@product.Name"
                                    data-image-url="@product.ImageUrl">
                                @product.Name - @product.Price
                            </option>
                        }
                    </select>

                </div>
                <div class="mb-3">
                    <label class="form-label">Quantity</label>
                    <input type="number" class="form-control" id="quantityInput" min="1" value="1">
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" onclick="addDetail()">Add</button>
            </div>
        </div>
    </div>
</div>


<div class="modal fade" id="cashModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="row align-items-center my-2">
                    <div class="col-4 text-end">
                        <label class="mb-0">Grand Total</label>
                    </div>
                    <div class="col-8">
                        <input type="number" asp-for="TransactionSale.GrandTotal" disabled class="form-control text-end" />
                    </div>
                </div>

                <div class="row align-items-center my-2">
                    <div class="col-4 text-end">
                        <label class="mb-0">Cash</label>
                    </div>
                    <div class="col-8">
                        <input type="number" id="CashInput" class="form-control text-end" />
                    </div>
                </div>

                <div class="row align-items-center my-2">
                    <div class="col-4 text-end">
                        <label class="mb-0">Change</label>
                    </div>
                    <div class="col-8 text-start">
                        <h4 id="ChangeOutput" class="mb-0 text-end">0</h4>
                    </div>
                </div>

                <div class="d-flex justify-content-end mt-4 gap-2">
                    <button type="button" class="btn btn-primary w-100" onclick="submitPayment()">Ok</button>
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="modal fade" id="nonCashModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-body text-center">
                <div class="row align-items-center my-2">
                    <div class="col-4 text-end">
                        <label class="mb-0">Grand Total</label>
                    </div>
                    <div class="col-8">
                        <input type="number" asp-for="TransactionSale.GrandTotal" disabled class="form-control text-end" />
                    </div>
                </div>

                <div class="row align-items-center my-3">
                    <div class="col-4 text-end">
                        <label class="mb-0">Evidence No</label>
                    </div>
                    <div class="col-8">
                        <input type="text" id="EvidenceInput" class="form-control text-start" />
                    </div>
                </div>

                <div class="d-flex justify-content-end mt-4 gap-2">
                    <button type="button" class="btn btn-primary w-100" onclick="submitPayment()">Ok</button>
                    <button type="button" class="btn btn-secondary w-100" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
</div>
@section scripts {
    <partial name="_ValidationScriptsPartial" />
    <script>
        // Add this to your existing scripts section
        document.addEventListener('DOMContentLoaded', function() {
            const discountInput = document.getElementById('discountInput');
            const voucherInput = document.getElementById('voucherInput');
            const totalDisplay = document.getElementById('totalDisplay');
            const discountDisplay = document.getElementById('discountDisplay');
            const voucherDisplay = document.getElementById('voucherDisplay');
            const grandTotalDisplay = document.getElementById('grandTotalDisplay');

            // if (discountInput) {
            //     discountInput.addEventListener('input', updateTotal);
            // }
            // if (voucherInput) {
            //     voucherInput.addEventListener('input', updateTotal);
            // }

            function updateSummary() {
                const total = parseFloat(totalDisplay.textContent) || 0;
                const discountPercent = parseFloat(discountInput.value) || 0;
                const voucherAmount = parseFloat(voucherInput.value) || 0;

                const discountAmount = (total * discountPercent / 100);
                const grandTotal = total - discountAmount - voucherAmount;

                discountDisplay.textContent = discountAmount.toFixed(2);
                voucherDisplay.textContent = `-${voucherAmount.toFixed(2)}`;
                grandTotalDisplay.textContent = grandTotal.toFixed(2);

                // Update the grand total in the payment modals
                const grandTotalInputs = document.querySelectorAll('input[name="TransactionSale.GrandTotal"]');
                grandTotalInputs.forEach(input => {
                    input.value = grandTotal;
                });
            }

            discountInput.addEventListener('input', updateSummary);
            voucherInput.addEventListener('input', updateSummary);
        });

        function setPaymentType(value) {
        document.getElementById('PaymentType').value = value;

        // Highlight the selected button
        document.querySelectorAll('.btn-outline-primary').forEach(btn => btn.classList.remove('active'));
        event.target.classList.add('active');
    }
        document.getElementById('CashInput')?.addEventListener('input', function () {
            const cash = parseFloat(this.value) || 0;
            const grandTotal = parseFloat(document.getElementById('grandTotalDisplay').textContent) || 0;
            const change = cash - grandTotal;
            document.getElementById('ChangeOutput').innerText = change > 0 ? change.toLocaleString() : '0';
        });


        function setPaymentType(type) {
            document.getElementById('PaymentType').value = type;
        }

        function submitPayment() {
            if (!validateForm()) {
                event.preventDefault();
                return false;
            }

            const form = document.getElementById('transactionForm');
            const paymentType = document.getElementById('PaymentType').value;


            // Get all the necessary values
            const total = parseFloat(document.getElementById('totalDisplay').textContent) || 0;
            const discountPercent = parseFloat(document.getElementById('discountInput').value) || 0;
            const discountAmount = parseFloat(document.getElementById('discountDisplay').textContent) || 0;
            const voucherAmount = parseFloat(document.getElementById('voucherInput').value) || 0;
            const grandTotal = parseFloat(document.getElementById('grandTotalDisplay').textContent) || 0;

            // Set Payment properties
            createOrUpdateHiddenInput(form, 'Payment.Amount', grandTotal);
            createOrUpdateHiddenInput(form, 'Payment.PaymentType', paymentType);


            // Create hidden inputs for transaction data if they don't exist
            createOrUpdateHiddenInput(form, 'TransactionSale.Total', total);
            createOrUpdateHiddenInput(form, 'TransactionSale.DiscountPercentage', discountPercent);
            createOrUpdateHiddenInput(form, 'TransactionSale.DiscountAmount', discountAmount);
            createOrUpdateHiddenInput(form, 'TransactionSale.VoucherAmount', voucherAmount);
            createOrUpdateHiddenInput(form, 'TransactionSale.GrandTotal', grandTotal);

            // Check for details
            const detailsRows = document.querySelectorAll('#detailsTable tbody tr');
            if (!detailsRows || detailsRows.length === 0) {
                alert('No transaction details found. Please add at least one item.');
                return;
            }



            if (!paymentType) {
                alert('Please select a payment type');
                return;
            }

            if (paymentType === 'Cash') {
                const cashAmount = parseFloat(document.getElementById('CashInput').value);
                const grandTotal = parseFloat(document.querySelector('input[name="TransactionSale.GrandTotal"]').value);

                if (!cashAmount) {
                    alert('Please enter cash amount');
                    return;
                }

                if (cashAmount < grandTotal) {
                    alert('Cash amount must be greater than or equal to grand total');
                    return;
                }
                createOrUpdateHiddenInput(form, 'Payment.CashAmount', cashAmount);
                createOrUpdateHiddenInput(form, 'Payment.Change', cashAmount - grandTotal);

            } else if (paymentType === 'NonCash') {
                const evidenceNo = document.getElementById('EvidenceInput').value;
                if (!evidenceNo) {
                    alert('Please enter evidence number');
                    return;
                }
                createOrUpdateHiddenInput(form, 'Payment.EvidenceNumber', evidenceNo);

            }

            // Close the modal
            const modals = document.querySelectorAll('.modal');
            modals.forEach(modal => {
                const modalInstance = bootstrap.Modal.getInstance(modal);
                if (modalInstance) {
                    modalInstance.hide();
                }
            });

            // Submit the form
            form.submit();
        }

        function createOrUpdateHiddenInput(form, name, value) {
            let input = form.querySelector(`input[name="${name}"]`);
            if (!input) {
                input = document.createElement('input');
                input.type = 'hidden';
                input.name = name;
                form.appendChild(input);
            }
            input.value = value;
        }

        function addDetail() {
            const select = document.getElementById('productSelect');
            const option = select.options[select.selectedIndex];
            const quantity = parseInt(document.getElementById('quantityInput').value);

            if (!select.value || quantity < 1) {
                alert('Please select a product and enter a valid quantity');
                return;
            }

            const productId = select.value;
            const productName = option.dataset.name;
            const price = parseFloat(option.dataset.price);
            const imageUrl = option.dataset.imageUrl || '';
            const subtotal = price * quantity;

            const tbody = document.querySelector('#detailsTable tbody');
            const rowIndex = tbody.children.length;
            const hasActionColumn = document.querySelector('#detailsTable thead th:last-child').textContent.trim() === 'Action';

            const tr = document.createElement('tr');
            let html = `
        <td>
            ${imageUrl ? `<img src="${imageUrl}" alt="Product Image" width="100" style="border-radius:5px; border:1px solid #ccc;" />` : ''}
            <input type="hidden" name="TransactionSale.Details[${rowIndex}].ProductId" value="${productId}">
            <input type="hidden" name="TransactionSale.Details[${rowIndex}].Product.Id" value="${productId}">
            <input type="hidden" name="TransactionSale.Details[${rowIndex}].Product.ImageUrl" value="${imageUrl}">
        </td>
        <td>
            ${productName}
            <input type="hidden" name="TransactionSale.Details[${rowIndex}].Product.Name" value="${productName}">
        </td>
        <td>
            ${quantity}
            <input type="hidden" name="TransactionSale.Details[${rowIndex}].Quantity" value="${quantity}">
        </td>
        <td>
            ${price}
            <input type="hidden" name="TransactionSale.Details[${rowIndex}].Price" value="${price}">
        </td>
        <td>
            ${subtotal}
            <input type="hidden" name="TransactionSale.Details[${rowIndex}].Subtotal" value="${subtotal}">
        </td>`;

            if (hasActionColumn) {
                html += `
        <td>
            <button type="button" class="btn btn-danger btn-sm" onclick="removeDetail(this)">Remove</button>
        </td>`;
            }
            tr.innerHTML = html;
            tbody.appendChild(tr);

            // Update total
            updateTotal();

            // Close modal and reset form
            const modal = bootstrap.Modal.getInstance(document.getElementById('addDetailModal'));
            modal.hide();
            select.value = '';
            document.getElementById('quantityInput').value = '1';
        }

        function removeDetail(button) {
            const row = button.closest('tr');
            row.remove();
            updateTotal();
        }

        function updateTotal() {
            let total = 0;
            const rows = document.querySelectorAll('#detailsTable tbody tr');

            // Calculate total from all rows
            rows.forEach(row => {
                const price = parseFloat(row.cells[3].textContent);  // Price is in 4th column
                const quantity = parseInt(row.cells[2].textContent); // Quantity is in 3rd column
                total += price * quantity;
            });

            // Update total display
            document.getElementById('totalDisplay').textContent = total;

            // Get discount and voucher values
            const discountPercent = parseFloat(document.getElementById('discountInput').value) || 0;
            const voucherAmount = parseFloat(document.getElementById('voucherInput').value) || 0;

            // Calculate discount amount
            const discountAmount = (total * discountPercent / 100);

            // Calculate grand total
            const grandTotal = total - discountAmount - voucherAmount;

            // Update all summary displays
            document.getElementById('totalDisplay').textContent = total.toFixed(2);
            document.getElementById('discountDisplay').textContent = discountAmount.toFixed(2);
            document.getElementById('voucherDisplay').textContent = `-${voucherAmount.toFixed(2)}`;
            document.getElementById('grandTotalDisplay').textContent = grandTotal.toFixed(2);

            // Update hidden inputs if they exist
            createOrUpdateHiddenInput(document.getElementById('transactionForm'), 'TransactionSale.Total', total);
            createOrUpdateHiddenInput(document.getElementById('transactionForm'), 'TransactionSale.DiscountAmount', discountAmount);
            createOrUpdateHiddenInput(document.getElementById('transactionForm'), 'TransactionSale.VoucherAmount', voucherAmount);
            createOrUpdateHiddenInput(document.getElementById('transactionForm'), 'TransactionSale.GrandTotal', grandTotal);

            // Update payment modal grand total inputs
            const grandTotalInputs = document.querySelectorAll('input[name="TransactionSale.GrandTotal"]');
            grandTotalInputs.forEach(input => {
                input.value = grandTotal;
            });
        }

        function validateForm() {
            const form = document.getElementById('transactionForm');
            if (!form.checkValidity()) {
                event.preventDefault();
                event.stopPropagation();
                // Trigger validation display
                form.classList.add('was-validated');
                return false;
            }

            const customerName = document.querySelector('[name="TransactionSale.CustomerName"]').value;
            if (!customerName || customerName.trim() === '') {
                alert('Please enter customer name');
                return false;
            }

            const details = document.querySelectorAll('#detailsTable tbody tr');
            if (details.length === 0) {
                alert('Please add at least one product');
                return false;
            }

            return true;
        }

        // Add the validation to your form
        document.getElementById('transactionForm').onsubmit = function(event) {
            if (!validateForm()) {
                event.preventDefault();
                return false;
            }
            return true;
        };



    </script>
}
